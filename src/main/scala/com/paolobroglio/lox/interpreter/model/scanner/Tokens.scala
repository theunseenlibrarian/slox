package com.paolobroglio.lox.interpreter.model.scanner

object Tokens {
  val LeftParen: KeywordToken = KeywordToken(TokenType.LeftParen)
  val RightParen: KeywordToken = KeywordToken(TokenType.RightParen)
  val LeftBrace: KeywordToken = KeywordToken(TokenType.LeftBrace)
  val RightBrace: KeywordToken = KeywordToken(TokenType.RightBrace)
  val Comma: KeywordToken = KeywordToken(TokenType.Comma)
  val SemiColon: KeywordToken = KeywordToken(TokenType.SemiColon)
  val Dot: KeywordToken = KeywordToken(TokenType.Dot)
  val Minus: KeywordToken = KeywordToken(TokenType.Minus)
  val Plus: KeywordToken = KeywordToken(TokenType.Plus)
  val Star: KeywordToken = KeywordToken(TokenType.Star)
  val Eof: KeywordToken = KeywordToken(TokenType.Eof)
  val Bang: KeywordToken = KeywordToken(TokenType.Bang)
  val BangEqual: KeywordToken = KeywordToken(TokenType.BangEqual)
  val EqualEqual: KeywordToken = KeywordToken(TokenType.EqualEqual)
  val Equal: KeywordToken = KeywordToken(TokenType.Equal)
  val Lesser: KeywordToken = KeywordToken(TokenType.Lesser)
  val LesserEqual: KeywordToken = KeywordToken(TokenType.LesserEqual)
  val Greater: KeywordToken = KeywordToken(TokenType.Greater)
  val GreaterEqual: KeywordToken = KeywordToken(TokenType.GreaterEqual)
  val Slash: KeywordToken = KeywordToken(TokenType.Slash)
  val And: KeywordToken = KeywordToken(TokenType.And)
  val Class: KeywordToken = KeywordToken(TokenType.Class)
  val Else: KeywordToken = KeywordToken(TokenType.Else)
  val False: KeywordToken = KeywordToken(TokenType.False)
  val For: KeywordToken = KeywordToken(TokenType.For)
  val Function: KeywordToken = KeywordToken(TokenType.Function)
  val If: KeywordToken = KeywordToken(TokenType.If)
  val Nil: KeywordToken = KeywordToken(TokenType.Nil)
  val Or: KeywordToken = KeywordToken(TokenType.Or)
  val Print: KeywordToken = KeywordToken(TokenType.Print)
  val Return: KeywordToken = KeywordToken(TokenType.Return)
  val Super: KeywordToken = KeywordToken(TokenType.Super)
  val This: KeywordToken = KeywordToken(TokenType.This)
  val True: KeywordToken = KeywordToken(TokenType.True)
  val Var: KeywordToken = KeywordToken(TokenType.Var)
  val While: KeywordToken = KeywordToken(TokenType.While)

  def stringLiteral(literal: String): LiteralToken = LiteralToken(TokenType.StringLiteral, Right(literal))
  def numberLiteral(literal: Double): LiteralToken = LiteralToken(TokenType.NumberLiteral, Left(literal))
}
